generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  FEMALE
  MALE
}

enum AttachmentType {
  IMAGE
}

enum InteractionType {
  VIEW
  LIKE
  REPOST
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique @db.VarChar(18)
  email        String         @unique @db.VarChar(255)
  password     String
  refreshToken String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  profile      Profile?
  posts        Post[]         @relation(name: "AuthoredPosts")
  likes        Like[]
  reposts      RepostedPost[]
  comments     Comment[]
  interactions Interaction[]
  followedBy   Follows[]      @relation("followedBy")
  following    Follows[]      @relation("following")

  @@map("users")
}

model Profile {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  firstName String  @db.VarChar(255)
  lastName  String  @db.VarChar(255)
  gender    Gender?
  avatar    String?
  city      String?
  bio       String? @db.VarChar(160)

  @@map("profiles")
}

model Attachment {
  id        Int            @id @default(autoincrement())
  post      Post           @relation(fields: [postId], references: [id])
  postId    Int
  url       String
  type      AttachmentType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("attachments")
}

model Post {
  id           Int            @id @default(autoincrement())
  content      String         @db.VarChar(500)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  attachments  Attachment[]
  author       User           @relation(name: "AuthoredPosts", fields: [authorId], references: [id])
  authorId     Int
  likedBy      Like[]
  repostedBy   RepostedPost[]
  commentedBy  Comment[]
  interactedBy Interaction[]

  @@map("posts")
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@map("likes")
}

model RepostedPost {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@map("repostedPosts")
}

model Comment {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  text      String   @db.VarChar(160)
  createdAt DateTime @default(now())

  @@id([userId, postId])
  @@map("comments")
}

model Interaction {
  id     Int             @id @default(autoincrement())
  user   User            @relation(fields: [userId], references: [id])
  userId Int
  post   Post            @relation(fields: [postId], references: [id])
  postId Int
  type   InteractionType

  @@map("interactions")
}

model Follows {
  followedBy   User     @relation("followedBy", fields: [followedById], references: [id])
  followedById Int
  following    User     @relation("following", fields: [followingId], references: [id])
  followingId  Int
  createdAt    DateTime @default(now())

  @@id([followingId, followedById])
}
